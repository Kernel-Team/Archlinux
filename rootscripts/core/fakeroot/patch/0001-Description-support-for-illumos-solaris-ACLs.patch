From bad60753e2e71ae2ac5adc3fc23d17022afa5d2a Mon Sep 17 00:00:00 2001
From: Shi Pujin <shipujin.t@gmail.com>
Date: Wed, 20 May 2020 14:54:39 +0800
Subject: [PATCH] Description: support for illumos (solaris) ACLs  This patch
 makes GNU coreutils shut up and stops GNU sed  making files with 0000
 permissions.

---
 configure.ac  |  9 +++++++++
 libfakeroot.c | 50 +++++++++++++++++++++++++++++++++++++++++++++++---
 wrapfunc.inp  | 14 ++++++++++++++
 3 files changed, 70 insertions(+), 3 deletions(-)

diff --git a/configure.ac b/configure.ac
index e75b439..605ae83 100644
--- a/configure.ac
+++ b/configure.ac
@@ -287,6 +287,15 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
   ])
 
 AC_CHECK_FUNCS(fchmodat fchownat fstatat mkdirat mknodat openat renameat unlinkat lchmod fgetattrlist)
+save_LIBS="$LIBS"
+# Linux
+AC_SEARCH_LIBS(acl_get_fd, acl)
+AC_CHECK_FUNCS(acl_get_fd)
+
+# Illumos
+AC_SEARCH_LIBS(acl_trivial, sec)
+AC_CHECK_FUNCS(acl_trivial)
+LIBS="$save_LIBS"
 
 AC_CHECK_FUNCS(capset listxattr llistxattr flistxattr getxattr lgetxattr fgetxattr setxattr lsetxattr fsetxattr removexattr lremovexattr fremovexattr)
 
diff --git a/libfakeroot.c b/libfakeroot.c
index f867758..a62c3f8 100644
--- a/libfakeroot.c
+++ b/libfakeroot.c
@@ -256,10 +256,12 @@ void load_library_symbols(void){
  /* clear dlerror() just in case dlsym() legitimately returns NULL */
     msg = dlerror();
     *(next_wrap[i].doit)=dlsym(get_libc(), next_wrap[i].name);
+#ifdef LIBFAKEROOT_DEBUGGING
+    /* illumos libc creates noise if symbols is not found (e. g. acl_get())*/
     if ( (msg = dlerror()) != NULL){
       fprintf (stderr, "dlsym(%s): %s\n", next_wrap[i].name, msg);
-/*    abort ();*/
     }
+#endif /* LIBFAKEROOT_DEBUGGING */
   }
 }
 
@@ -1916,6 +1918,9 @@ int fakeroot_isdisabled(void)
 }
 
 #ifdef HAVE_ACL_T
+
+/* linux: */
+#ifdef HAVE_ACL_GET_FD
 acl_t acl_get_fd(int fd) {
   errno = ENOTSUP;
   return (acl_t)NULL;
@@ -1928,12 +1933,51 @@ int acl_set_fd(int fd, acl_t acl) {
   errno = ENOTSUP;
   return -1;
 }
-
 int acl_set_file(const char *path_p, acl_type_t type, acl_t acl) {
   errno = ENOTSUP;
   return -1;
 }
-#endif /* HAVE_SYS_ACL_H */
+#endif /* HAVE_ACL_GET_FD */
+
+/* illumos: */
+#ifdef HAVE_ACL_TRIVIAL
+int acl_get(const char *path, int flags, acl_t **aclp)
+{
+    errno = ENOSYS;
+    return -1;
+}
+int facl_get(int fd, int flags, acl_t **aclp)
+{
+    errno = ENOSYS;
+    return -1;
+}
+int acl_set(const char *path, acl_t *aclp)
+{
+    errno = ENOSYS;
+    return -1;
+}
+int facl_set(int fd, acl_t *aclp)
+{
+    errno = ENOSYS;
+    return -1;
+}
+int acl_trivial(const char *path)
+{
+    return 0;
+}
+int acl(const char *path, int cmd, int cnt, void *buf)
+{
+    errno = ENOSYS;
+    return -1;
+}
+int facl(int fd, int cmd, int cnt, void *buf)
+{
+    errno = ENOSYS;
+    return -1;
+}
+#endif /* HAVE_ACL_TRIVIAL */
+
+#endif /* HAVE_ACL_T */
 
 #ifdef HAVE_FTS_READ
 FTSENT *fts_read(FTS *ftsp) {
diff --git a/wrapfunc.inp b/wrapfunc.inp
index 5eff0cc..7f09c36 100644
--- a/wrapfunc.inp
+++ b/wrapfunc.inp
@@ -208,10 +208,24 @@ unlinkat;int;(int dir_fd, const char *pathname, int flags);(dir_fd, pathname, fl
 #endif /* HAVE_FSTATAT */
 
 #ifdef HAVE_ACL_T
+
+#ifdef HAVE_ACL_GET_FD
 acl_get_fd;acl_t;(int fd);(fd)
 acl_get_file;acl_t;(const char *path_p, acl_type_t type);(path_p, type)
 acl_set_fd;int;(int fd, acl_t acl);(fd, acl)
 acl_set_file;int;(const char *path_p, acl_type_t type, acl_t acl);(path_p, type, acl)
+#endif
+
+#ifdef HAVE_ACL_TRIVIAL
+acl_get;int;(const char *path, int flags, acl_t **aclp);(path, flags, aclp)
+facl_get;int;(int fd, int flags, acl_t **aclp);(fd, flags, aclp)
+acl_set;int;(const char *path, acl_t *aclp);(path, aclp)
+facl_set;int;(int fd, acl_t *aclp);(fd, aclp)
+acl_trivial;int;(const char *path);(path)
+acl;int;(const char *path, int cmd, int cnt, void *buf);(path, cmd, cnt, buf)
+facl;int;(int fd, int cmd, int cnt, void *buf);(fd, cmd, cnt, buf)
+#endif
+
 #endif /* HAVE_ACL_T */
 
 #ifdef HAVE_FTS_READ
-- 
2.23.0

